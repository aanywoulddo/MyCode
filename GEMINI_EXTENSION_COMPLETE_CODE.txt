# GEMINI FOLDERS CHROME EXTENSION - COMPLETE CODE
# ================================================================
# This file contains all the code for the Gemini Chrome extension with working prompt library
# The extension provides folder management, bulk delete, and prompt library functionality for Gemini
# 
# Libraries excluded (but required):
# - D/lib/html2pdf.bundle.min.js (469KB PDF generation library)
# - D/icons/*.png (Various sized icons for the extension)
# - D/scripts/delete-conversations.js (19KB additional deletion script)
# ================================================================

# ================================================================
# MANIFEST.JSON - Extension Configuration
# ================================================================
{
  "manifest_version": 3,
  "name": "Gemini Folders (Replicated)",
  "version": "1.0",
  "description": "Organize your Gemini chats into collapsible folders.",
  "permissions": [
    "storage",
    "activeTab",
    "scripting"
  ],
  "content_scripts": [
    {
      "matches": ["*://gemini.google.com/*"],
      "js": ["prompt_library.js", "injector.js"]
    }
  ],
  "icons": {
    "16": "icons/icon16.png",
    "48": "icons/icon48.png",
    "128": "icons/icon128.png"
  },
  "web_accessible_resources": [
    {
      "resources": ["prompt_library.html", "prompt_library.css", "prompt_library.js"],
      "matches": ["*://gemini.google.com/*"]
    }
  ]
}

# ================================================================
# PROMPT_LIBRARY.HTML - Prompt Library Modal Structure
# ================================================================
<div id="prompt-library-modal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Prompt Library</h2>
        <div class="controls">
            <input type="text" id="search-bar" placeholder="Search prompts...">
            <select id="category-filter">
                <option value="all">All Categories</option>
                <option value="marketing">Marketing</option>
                <option value="personal_development">Personal Development</option>
                <option value="sales">Sales</option>
                <option value="customer_service">Customer Service</option>
                <option value="seo">SEO</option>
                <option value="engineering">Engineering</option>
                <option value="coding">Coding</option>
                <option value="education">Education</option>
                <option value="finance">Finance</option>
                <option value="creative">Creative</option>
            </select>
        </div>
        <div id="prompt-list" class="prompt-list">
            <!-- Prompts will be dynamically loaded here -->
        </div>
    </div>
</div>

# ================================================================
# PROMPT_LIBRARY.CSS - Modern Styling for Prompt Library
# ================================================================
/* Main modal backdrop */
.modal {
    display: none; 
    position: fixed; 
    z-index: 2000; 
    left: 0;
    top: 0;
    width: 100%; 
    height: 100%; 
    overflow: auto; 
    background-color: rgba(0, 0, 0, 0.6); 
    backdrop-filter: blur(4px);
}

/* Modal content container */
.modal-content {
    background-color: #1f1f1f;
    color: #e8eaed;
    margin: 8% auto; 
    padding: 0;
    border: 1px solid #5f6368;
    width: 90%;
    max-width: 720px;
    border-radius: 16px;
    font-family: 'Google Sans', 'Roboto', sans-serif;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.8);
    animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Modal header */
.modal-content h2 {
    color: #e8eaed;
    margin: 0;
    padding: 24px 24px 16px 24px;
    font-size: 20px;
    font-weight: 500;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

/* Close button */
.close-button {
    color: #9aa0a6;
    font-size: 24px;
    font-weight: 400;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    transition: all 0.2s ease;
}

.close-button:hover,
.close-button:focus {
    color: #e8eaed;
    background-color: #3c4043;
}

/* Controls section */
.controls {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
    padding: 0 24px;
}

#search-bar, #category-filter {
    flex: 1;
    padding: 12px 16px;
    border-radius: 8px;
    border: 1px solid #5f6368;
    background-color: #2d2d2f;
    color: #e8eaed;
    font-size: 14px;
    font-family: 'Google Sans', 'Roboto', sans-serif;
    transition: all 0.2s ease;
}

#search-bar:focus, #category-filter:focus {
    outline: none;
    border-color: #8ab4f8;
    box-shadow: 0 0 0 2px rgba(138, 180, 248, 0.2);
}

#search-bar::placeholder {
    color: #9aa0a6;
}

#category-filter {
    background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23e8eaed' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right 12px center;
    background-size: 16px;
    padding-right: 40px;
    cursor: pointer;
}

/* Prompt list container */
.prompt-list {
    max-height: 450px;
    overflow-y: auto;
    padding: 0 24px 24px 24px;
    scrollbar-width: thin;
    scrollbar-color: #5f6368 #2d2d2f;
}

.prompt-list::-webkit-scrollbar {
    width: 6px;
}

.prompt-list::-webkit-scrollbar-track {
    background: #2d2d2f;
    border-radius: 3px;
}

.prompt-list::-webkit-scrollbar-thumb {
    background: #5f6368;
    border-radius: 3px;
}

.prompt-list::-webkit-scrollbar-thumb:hover {
    background: #8ab4f8;
}

/* Individual prompt items */
.prompt-item {
    background: #2d2d2f;
    border: 1px solid #5f6368;
    border-radius: 12px;
    padding: 16px;
    margin-bottom: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
}

.prompt-item:hover {
    background: #3c4043;
    border-color: #8ab4f8;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
}

.prompt-item:active {
    transform: translateY(0);
}

.prompt-item .title {
    font-size: 16px;
    font-weight: 500;
    color: #e8eaed;
    margin-bottom: 8px;
    line-height: 1.4;
}

.prompt-item .content {
    font-size: 14px;
    color: #9aa0a6;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

/* Category badge */
.prompt-item::before {
    content: attr(data-category);
    position: absolute;
    top: 12px;
    right: 12px;
    background: #8ab4f8;
    color: #1f1f1f;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 10px;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    opacity: 0;
    transition: opacity 0.2s ease;
}

.prompt-item:hover::before {
    opacity: 1;
}

/* Empty state */
.prompt-list:empty::after {
    content: "No prompts found. Try adjusting your search or category filter.";
    display: block;
    text-align: center;
    color: #9aa0a6;
    padding: 40px 20px;
    font-style: italic;
}

/* Light theme support */
@media (prefers-color-scheme: light) {
    .modal-content {
        background-color: #ffffff;
        color: #1f1f1f;
        border-color: #dadce0;
    }
    
    .modal-content h2 {
        color: #1f1f1f;
    }
    
    .close-button {
        color: #5f6368;
    }
    
    .close-button:hover {
        color: #1f1f1f;
        background-color: #f1f3f4;
    }
    
    #search-bar, #category-filter {
        background-color: #ffffff;
        color: #1f1f1f;
        border-color: #dadce0;
    }
    
    #search-bar::placeholder {
        color: #5f6368;
    }
    
    .prompt-item {
        background: #f8f9fa;
        border-color: #dadce0;
    }
    
    .prompt-item:hover {
        background: #e8f0fe;
        border-color: #1a73e8;
    }
    
    .prompt-item .title {
        color: #1f1f1f;
    }
    
    .prompt-item .content {
        color: #5f6368;
    }
    
    .prompt-item::before {
        background: #1a73e8;
        color: #ffffff;
    }
}

/* Responsive design */
@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 5% auto;
        max-height: 90vh;
    }
    
    .controls {
        flex-direction: column;
        gap: 8px;
    }
    
    .prompt-list {
        max-height: 60vh;
    }
    
    .prompt-item {
        padding: 12px;
    }
    
    .prompt-item .title {
        font-size: 14px;
    }
    
    .prompt-item .content {
        font-size: 12px;
        -webkit-line-clamp: 2;
    }
}

# ================================================================
# PROMPT_LIBRARY.JS - Prompt Library Core Functionality
# ================================================================
class PromptLibrary {
    constructor(shadowRoot) {
        this.shadowRoot = shadowRoot;
        this.prompts = [
            // Marketing
            { title: 'Marketing Copy', content: 'Write a catchy marketing slogan for a new coffee brand.', category: 'marketing' },
            { title: 'Product Description', content: 'Create a compelling product description for [product name] that highlights its key features and benefits.', category: 'marketing' },
            { title: 'Social Media Post', content: 'Write an engaging social media post about [topic] that encourages interaction and shares.', category: 'marketing' },
            { title: 'Email Marketing', content: 'Create a persuasive email marketing campaign for [product/service] targeting [audience].', category: 'marketing' },
            
            // Sales
            { title: 'Sales Email', content: 'Draft a follow-up email to a potential client who has shown interest in our product.', category: 'sales' },
            { title: 'Sales Pitch', content: 'Create a compelling 2-minute sales pitch for [product/service] addressing common objections.', category: 'sales' },
            { title: 'Cold Outreach', content: 'Write a professional cold outreach message for [target audience] about [product/service].', category: 'sales' },
            
            // Coding
            { title: 'Code Generation', content: 'Generate a Python function to calculate the factorial of a number.', category: 'coding' },
            { title: 'Code Review', content: 'Review this code and suggest improvements for performance, readability, and best practices: [paste code here]', category: 'coding' },
            { title: 'Bug Fix', content: 'Help me debug this code. Here\'s the error I\'m getting: [error message] and here\'s the code: [paste code]', category: 'coding' },
            { title: 'API Documentation', content: 'Create comprehensive API documentation for this function: [paste function]', category: 'coding' },
            { title: 'Unit Tests', content: 'Write unit tests for this function: [paste function]', category: 'coding' },
            
            // Creative
            { title: 'Creative Writing', content: 'Write a short story about a robot who discovers music.', category: 'creative' },
            { title: 'Blog Post', content: 'Write a comprehensive blog post about [topic] that is engaging and informative.', category: 'creative' },
            { title: 'Video Script', content: 'Create a script for a 5-minute video explaining [topic] to [target audience].', category: 'creative' },
            { title: 'Content Ideas', content: 'Generate 10 creative content ideas for [topic/industry] that would engage [target audience].', category: 'creative' },
            
            // Personal Development
            { title: 'Goal Setting', content: 'Help me create a SMART goal framework for achieving [specific objective] within [timeframe].', category: 'personal_development' },
            { title: 'Career Advice', content: 'Provide career advice for someone looking to transition from [current role] to [desired role].', category: 'personal_development' },
            { title: 'Learning Plan', content: 'Create a structured learning plan to master [skill/topic] in [timeframe].', category: 'personal_development' },
            { title: 'Resume Review', content: 'Review and improve this resume for a [target position]: [paste resume]', category: 'personal_development' },
            
            // Customer Service
            { title: 'Customer Support', content: 'Write a helpful customer support response for a client who [describe issue].', category: 'customer_service' },
            { title: 'Complaint Response', content: 'Draft a professional response to this customer complaint: [paste complaint]', category: 'customer_service' },
            { title: 'FAQ Creation', content: 'Create comprehensive FAQ answers for common questions about [product/service].', category: 'customer_service' },
            
            // SEO
            { title: 'SEO Content', content: 'Write SEO-optimized content about [topic] targeting the keyword "[keyword]".', category: 'seo' },
            { title: 'Meta Descriptions', content: 'Create compelling meta descriptions for pages about [topic] that are under 160 characters.', category: 'seo' },
            { title: 'Keyword Research', content: 'Suggest relevant keywords and search terms for content about [topic].', category: 'seo' },
            
            // Engineering
            { title: 'Technical Documentation', content: 'Write technical documentation for [system/process] that explains how it works and how to use it.', category: 'engineering' },
            { title: 'Architecture Design', content: 'Help me design a system architecture for [project description] considering scalability and performance.', category: 'engineering' },
            { title: 'Requirements Analysis', content: 'Analyze these requirements and identify potential issues or improvements: [paste requirements]', category: 'engineering' },
            
            // Education
            { title: 'Lesson Plan', content: 'Create a lesson plan for teaching [topic] to [target audience/grade level].', category: 'education' },
            { title: 'Study Guide', content: 'Create a comprehensive study guide for [subject/topic] covering key concepts and practice questions.', category: 'education' },
            { title: 'Quiz Generator', content: 'Generate a quiz with 10 questions about [topic] with multiple choice answers.', category: 'education' },
            
            // Finance
            { title: 'Budget Analysis', content: 'Help me analyze this budget and suggest optimizations: [paste budget details]', category: 'finance' },
            { title: 'Investment Advice', content: 'Provide general investment guidance for someone with [financial situation] and [risk tolerance].', category: 'finance' },
            { title: 'Financial Planning', content: 'Create a basic financial plan for achieving [financial goal] within [timeframe].', category: 'finance' },
        ];
        this.init();
    }

    init() {
        this.setupEventListeners();
    }

    setupEventListeners() {
        const closeButton = this.shadowRoot.querySelector('.close-button');
        const searchBar = this.shadowRoot.getElementById('search-bar');
        const categoryFilter = this.shadowRoot.getElementById('category-filter');

        if (closeButton) {
            closeButton.onclick = () => this.hide();
        }

        if (searchBar) {
            searchBar.onkeyup = () => this.filterPrompts();
        }

        if (categoryFilter) {
            categoryFilter.onchange = () => this.filterPrompts();
        }

        const modal = this.shadowRoot.getElementById('prompt-library-modal');
        window.onclick = (event) => {
            if (event.target == modal) {
                this.hide();
            }
        }
    }

    show() {
        const modal = this.shadowRoot.getElementById('prompt-library-modal');
        modal.style.display = 'block';
        this.loadPrompts();
    }

    hide() {
        const modal = this.shadowRoot.getElementById('prompt-library-modal');
        modal.style.display = 'none';
    }

    loadPrompts(filteredPrompts = this.prompts) {
        const promptList = this.shadowRoot.getElementById('prompt-list');
        promptList.innerHTML = ''; 

        filteredPrompts.forEach(prompt => {
            const promptElement = document.createElement('div');
            promptElement.className = 'prompt-item';
            promptElement.setAttribute('data-category', prompt.category);
            promptElement.innerHTML = `
                <div class="title">${prompt.title}</div>
                <div class="content">${prompt.content}</div>
            `;
            promptElement.addEventListener('click', () => this.usePrompt(prompt.content));
            promptList.appendChild(promptElement);
        });
    }

    usePrompt(content) {
        // Try multiple selectors for different Gemini UI versions
        const selectors = [
            '.ql-editor.textarea.new-input-ui',  // Primary selector from provided HTML
            '.ql-editor[contenteditable="true"]', // Backup selector
            'rich-textarea .ql-editor',          // Another variation
            'div[contenteditable="true"][role="textbox"]', // Generic contenteditable textbox
            'textarea' // Fallback for older versions
        ];

        let geminiInput = null;
        
        // Try each selector until we find the input
        for (const selector of selectors) {
            geminiInput = document.querySelector(selector);
            if (geminiInput) {
                console.log(`Found Gemini input using selector: ${selector}`);
                break;
            }
        }

        if (geminiInput) {
            // Handle different input types
            if (geminiInput.tagName.toLowerCase() === 'textarea') {
                // Traditional textarea
                geminiInput.value = content;
                geminiInput.focus();
            } else if (geminiInput.contentEditable === 'true') {
                // Contenteditable div (Quill editor)
                geminiInput.innerHTML = `<p>${content}</p>`;
                geminiInput.focus();
                
                // Trigger input events to notify the application
                const inputEvent = new Event('input', { bubbles: true });
                const changeEvent = new Event('change', { bubbles: true });
                geminiInput.dispatchEvent(inputEvent);
                geminiInput.dispatchEvent(changeEvent);
                
                // Place cursor at the end
                const selection = window.getSelection();
                const range = document.createRange();
                range.selectNodeContents(geminiInput);
                range.collapse(false);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            
            this.hide();
        } else {
            console.error('Could not find Gemini input field. Available selectors tried:', selectors);
            // Show user-friendly error
            alert('Could not find the chat input field. Please make sure you are on the Gemini chat page.');
        }
    }

    filterPrompts() {
        const searchTerm = this.shadowRoot.getElementById('search-bar').value.toLowerCase();
        const category = this.shadowRoot.getElementById('category-filter').value;

        const filtered = this.prompts.filter(prompt => {
            const matchesSearch = prompt.title.toLowerCase().includes(searchTerm) || prompt.content.toLowerCase().includes(searchTerm);
            const matchesCategory = category === 'all' || prompt.category === category;
            return matchesSearch && matchesCategory;
        });

        this.loadPrompts(filtered);
    }
}

# ================================================================
# BACKGROUND.JS - Background Script (Empty)
# ================================================================
// Background script is empty in this implementation

# ================================================================
# INJECTOR.JS - Main Extension Logic (Complete)
# ================================================================
// Gemini Folders - REFACTORED injector.js
(function() {
    'use strict';

    // --- CONSTANTS AND STATE ---
    const INJECTOR_HOST_ID = 'gemini-folders-injector-host';
    const STORAGE_KEY = 'geminiFoldersData';

    // Selectors for the deletion logic, adapted from the source extension
    const DELETE_BUTTON_SELECTORS = ['button[data-test-id="delete-button"]', 'button[aria-label*="delete"]', 'button:contains("Delete")', "button.delete-btn"];
    const CONFIRM_BUTTON_SELECTORS = ['button[data-test-id="confirm-button"]', 'button:contains("Delete")', 'button:contains("Confirm")', 'button[aria-label*="confirm"]', "button.confirm-btn"];
    const ACTIONS_MENU_SELECTORS = ['button[data-test-id="actions-menu-button"]', 'button[aria-label*="actions"]', 'button[aria-label*="menu"]', "button.menu-button", "button.actions-button"];
    const OVERLAY_CONTAINER_SELECTORS = ["div.cdk-overlay-container", '[role="dialog"]', ".modal-container", ".overlay-container"];

    let hostElement = null;
    let shadow;
    let currentTheme = 'light';
    let isModalOpen = false;
    let promptLibraryInstance;

    // State object to hold dynamic data, similar to the target's storage module.
    let state = {
        folders: [],
        settings: {
            hideFolderedChats: false
        },
        selectedItems: [],
        modalType: null, // e.g., 'MANAGE_FOLDERS', 'ADD_FOLDER'
    };

    // --- ORIGINAL UTILITY FUNCTIONS (Unchanged) ---
    function generateUUID() {
        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
            (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    }
    function delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); }

    // --- NEW HELPER FUNCTIONS (for Bulk Delete) ---
    function delayMs(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function findElement(selectors, parent = document) {
        if (!parent) return null;
        for (const selector of selectors) {
            try {
                const element = parent.querySelector(selector);
                if (element) return element;
            } catch (e) {
                console.warn(`[Gemini Toolbox] Invalid selector "${selector}":`, e);
            }
        }
        return null;
    }

    function waitForElement(selectors, parent = document, timeout = 7000) {
        return new Promise((resolve, reject) => {
            const element = findElement(selectors, parent);
            // Check if element is not only present but also visible and interactive
            if (element && element.offsetParent !== null && !element.disabled) {
                return resolve(element);
            }

            let elapsedTime = 0;
            const interval = 150;
            const timer = setInterval(() => {
                elapsedTime += interval;
                const foundElement = findElement(selectors, parent);
                if (foundElement && foundElement.offsetParent !== null && !foundElement.disabled) {
                    clearInterval(timer);
                    resolve(foundElement);
                } else if (elapsedTime >= timeout) {
                    clearInterval(timer);
                    console.error(`[Gemini Toolbox] Element not actionable within ${timeout}ms. Tried selectors:`, selectors);
                    reject(new Error(`Element not actionable within ${timeout}ms`));
                }
            }, interval);
        });
    }

    async function loadData() {
        try {
            const result = await chrome.storage.local.get(STORAGE_KEY);
            // Initialize with default structure if it doesn't exist
            state.folders = result[STORAGE_KEY]?.folders || [];
            state.settings = result[STORAGE_KEY]?.settings || { hideFolderedChats: false };
        } catch (error) {
            console.error("Gemini Folders: Error loading data", error);
            state.folders = [];
            state.settings = { hideFolderedChats: false };
        }
    }

    async function saveData() {
        try {
            // Only save the necessary parts of the state
            const dataToSave = { 
                folders: state.folders,
                settings: state.settings 
            };
            await chrome.storage.local.set({ [STORAGE_KEY]: dataToSave });
        } catch (error) {
            console.error("Gemini Folders: Error saving data", error);
        }
    }
    
    function getChatIdFromElement(chatElement) {
        if (!chatElement) return null;
        const jslog = chatElement.getAttribute('jslog');
        if (jslog) {
            const match = jslog.match(/BardVeMetadataKey:\[[^\]]*\["([^"]+)"/);
            if (match && match[1]) {
                return match[1];
            }
        }
        const testId = chatElement.getAttribute('data-test-id');
        if (testId && testId.startsWith('conversation_c_')) {
            return testId.substring('conversation_'.length);
        }
        return null;
    }

    function getAllConversationElements() {
        return Array.from(document.querySelectorAll('conversations-list div[data-test-id="conversation"]'));
    }

    function getTextColorForBackground(hexColor) {
        if (!hexColor || hexColor.length < 7) return 'var(--gf-text-primary)'; // Default if invalid

        const r = parseInt(hexColor.slice(1, 3), 16);
        const g = parseInt(hexColor.slice(3, 5), 16);
        const b = parseInt(hexColor.slice(5, 7), 16);

        // Formula for perceived brightness (YIQ)
        const brightness = (r * 299 + g * 587 + b * 114) / 1000;

        // Return black for light backgrounds, white for dark backgrounds
        return brightness > 155 ? '#000000' : '#FFFFFF';
    }

    // --- THEME & STYLING (Slightly modified to use a single CSS block) ---
    function detectTheme() {
        const body = document.body;
        if (body.classList.contains('dark-theme') || body.classList.contains('dark_mode_toggled')) return 'dark';
        const htmlTheme = document.documentElement.getAttribute('data-theme');
        if (htmlTheme === 'dark') return 'dark';
        const bodyBgColor = window.getComputedStyle(body).backgroundColor;
        if (bodyBgColor) {
            const rgb = bodyBgColor.match(/\d+/g);
            if (rgb && rgb.length >= 3) {
                const brightness = (parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000;
                return brightness < 128 ? 'dark' : 'light';
            }
        }
        return 'light';
    }

    function createGlobalStyles() {
        if (!shadow) return;
        const styleElement = document.createElement('style');
        // REFACTORED: We'll use a single, large CSS block that contains all styles
        // for the modals, lists, buttons, etc., mimicking the target UI.
        styleElement.textContent = `
            :host { 
                /* Light Theme */
                --gf-bg-primary-light: #FFFFFF;
                --gf-text-primary-light: #202124;
                --gf-danger-light: #d93025;
                --gf-border-light: #dadce0;
                --gf-hover-light: #f1f3f4;
                --gf-blue-light: #1a73e8;
                --gf-bg-secondary-light: #f0f4f9;
                --gf-border-color-light: #dadce0;
                --gf-text-primary-light: #1f1f1f;
                --gf-text-secondary-light: #5f6368;
                --gf-accent-primary-light: #1a73e8;
                --gf-accent-danger-light: #d93025;
                --gf-bg-input-light: #ffffff;

                /* Dark Theme */
                --gf-bg-primary-dark: #131314;
                --gf-bg-secondary-dark: #2d2d2f;
                --gf-border-color-dark: #5f6368;
                --gf-text-primary-dark: #e3e3e3;
                --gf-text-secondary-dark: #9aa0a6;
                --gf-accent-primary-dark: #8ab4f8;
                --gf-accent-danger-dark: #f28b82;
                --gf-bg-input-dark: #2d2d2f;

                /* Default to dark theme from screenshot */
                --gf-text-primary: var(--gf-text-primary-dark);
                --gf-text-secondary: #969ba1;
                --gf-bg-primary: var(--gf-bg-primary-dark);
                --gf-hover-bg: var(--gf-hover-dark);
                --gf-border-color: var(--gf-border-dark);
                --gf-danger: var(--gf-danger-dark);
                --gf-blue-accent: var(--gf-blue-dark);
            }
            .sidebar-tab { 
                display: flex; align-items: center; gap: 12px;
                padding: 10px; margin: 4px 0; border-radius: 8px;
                cursor: pointer; font-size: 14px; color: var(--gf-text-primary);
                position: relative;
            }
            .sidebar-tab:hover { background-color: var(--gf-hover-bg); }

            /* Gemini Toolbox Button and Dropdown */
            .toolbox-button {
                display: flex; align-items: center; gap: 8px;
                width: 100%; padding: 0; border: none; background: none;
                cursor: pointer; font-size: 14px; color: var(--gf-text-primary);
            }
            .toolbox-button:hover { background-color: var(--gf-hover-bg); }

            .dropdown-arrow {
                margin-left: auto;
                transition: transform 0.2s ease;
            }
            .dropdown-arrow.rotated {
                transform: rotate(180deg);
            }

            .toolbox-dropdown {
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background-color: var(--gf-bg-primary);
                border: 1px solid var(--gf-border-color);
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
                z-index: 1000;
                overflow: hidden;
            }

            .dropdown-item {
                display: flex; align-items: center; gap: 8px;
                padding: 12px; cursor: pointer;
                color: var(--gf-text-primary);
                font-size: 14px;
                transition: background-color 0.2s ease;
            }
            .dropdown-item:hover {
                background-color: var(--gf-hover-bg);
            }

            /* Modal Backdrop */
            .infi-chatgpt-modal {
                position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
                background-color: rgba(0,0,0,0.65); z-index: 9999;
                display: flex; align-items: center; justify-content: center;
            }
            /* Modal Content Box */
            .modal-content {
                width: 600px;
                background-color: var(--gf-bg-primary);
                border-radius: 12px; border: 1px solid var(--gf-border-color);
                box-shadow: 0 5px 20px rgba(0,0,0,0.4);
                color: var(--gf-text-primary);
                display: flex; flex-direction: column;
                max-height: 80vh;
            }
            .modal-header {
                display: flex; justify-content: space-between; align-items: center;
                padding: 20px;
            }
            .modal-header h2 { margin: 0; font-size: 20px; font-weight: 500; }
            .modal-body { 
                padding: 0 20px 20px 20px; 
                display: flex; flex-direction: column;
                flex-grow: 1;
                overflow-y: hidden;
            }
             .infi-chatgpt-manageTabs-content {
                display: flex; flex-direction: column;
                height: 100%;
            }
            #folder-list-container {
                flex-grow: 1;
                overflow-y: auto;
                margin-top: 16px;
            }
             .infi-chatgpt-manageTabs-buttonsContainer {
                margin-top: auto; /* Pushes to the bottom */
                padding-top: 16px;
                text-align: right;
            }
            /* Buttons */
            .button {
                border: none; border-radius: 6px; padding: 8px 14px;
                font-size: 14px; cursor: pointer;
            }
            .primary { background-color: #8AB4F8; color: #202124; }
            .secondary { background-color: var(--gf-hover-bg); color: var(--gf-text-primary); }
            .danger { background-color: var(--gf-danger); color: #202124; }
            .icon-btn { background: none; border: none; cursor: pointer; color: var(--gf-text-secondary); }

            /* Form & List Styles */
            input[type="text"], input[type="search"] {
                width: 100%;
                padding: 8px 12px;
                background-color: var(--gf-bg-input);
                border: 1px solid var(--gf-border-color);
                color: var(--gf-text-primary);
                border-radius: 6px;
                box-sizing: border-box; /* Important */
                font-size: 14px;
            }
            .list-item {
                display: flex; align-items: center; gap: 10px;
                padding: 8px; border-radius: 6px; margin-bottom: 4px;
            }
            .list-item:hover { background-color: var(--gf-hover-bg); }
            .list-item .item-title {
                flex-grow: 1;
                cursor: pointer;
            }

            .list-item .item-controls {
                display: flex;
                align-items: center;
                gap: 8px;
                color: var(--gf-text-secondary);
            }
            
            .list-item .add-subfolder-btn {
                opacity: 0;
                transition: opacity 0.2s ease-in-out;
            }
            
            .list-item:hover .add-subfolder-btn {
                opacity: 1;
            }

            .icon-btn {
                background: none;
                border: none;
                cursor: pointer;
                color: var(--gf-text-secondary);
            }

            /* --- NEW: Bulk Delete Modal Specific Styles --- */
            #bulk-delete-list {
                margin-top: 16px;
                max-height: 400px;
                overflow-y: auto;
                padding-right: 10px; /* For scrollbar */
            }
            .bulk-delete-item {
                display: flex;
                align-items: center;
                padding: 8px;
                border-radius: 6px;
                margin-bottom: 4px;
            }
             .bulk-delete-item:hover {
                background-color: var(--gf-hover-bg);
            }
            .bulk-delete-item input[type="checkbox"] {
                margin-right: 12px;
                width: 18px;
                height: 18px;
            }
            .bulk-delete-item label {
                font-size: 14px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }
             #bulk-delete-controls {
                padding-top: 16px;
                border-top: 1px solid var(--gf-border-color);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            #bulk-delete-select-all-container {
                display: flex;
                align-items: center;
            }
             #bulk-delete-status {
                font-size: 14px;
                color: var(--gf-text-secondary);
            }

            .light-theme {
                --gf-bg-primary: var(--gf-bg-primary-light);
                --gf-text-primary: var(--gf-text-primary-light);
                --gf-text-secondary: var(--gf-text-secondary-light);
                --gf-accent-primary: var(--gf-accent-primary-light);
                --gf-accent-danger: var(--gf-accent-danger-light);
                --gf-bg-input: var(--gf-bg-input-light);
            }
            .dark-theme {
                --gf-bg-primary: var(--gf-bg-primary-dark);
                --gf-bg-secondary: var(--gf-bg-secondary-dark);
                --gf-border-color: var(--gf-border-color-dark);
                --gf-text-primary: var(--gf-text-primary-dark);
                --gf-text-secondary: var(--gf-text-secondary-dark);
                --gf-accent-primary: var(--gf-accent-primary-dark);
                --gf-accent-danger: var(--gf-accent-danger-dark);
                --gf-bg-input: var(--gf-bg-input-dark);
            }
            .dark-theme .danger {
                background-color: var(--gf-accent-danger-dark);
                color: #202124;
            }
        `;
        shadow.appendChild(styleElement);
        applyThemeStyles();
    }

    function applyThemeStyles() {
        if (!hostElement) return;
        currentTheme = detectTheme();
        const isDark = currentTheme === 'dark';

        hostElement.style.setProperty('--gf-bg-primary', isDark ? 'var(--gf-bg-primary-dark)' : 'var(--gf-bg-primary-light)');
        hostElement.style.setProperty('--gf-text-primary', isDark ? 'var(--gf-text-primary-dark)' : 'var(--gf-text-primary-light)');
        hostElement.style.setProperty('--gf-danger', isDark ? 'var(--gf-danger-dark)' : 'var(--gf-danger-light)');
        hostElement.style.setProperty('--gf-border-color', isDark ? 'var(--gf-border-dark)' : 'var(--gf-border-light)');
        hostElement.style.setProperty('--gf-hover-bg', isDark ? 'var(--gf-hover-dark)' : 'var(--gf-hover-light)');
        hostElement.style.setProperty('--gf-blue-accent', isDark ? 'var(--gf-blue-dark)' : 'var(--gf-blue-light)');
        hostElement.style.setProperty('--gf-text-secondary', isDark ? 'var(--gf-text-secondary-dark)' : 'var(--gf-text-secondary-light)');
        hostElement.style.setProperty('--gf-accent-primary', isDark ? 'var(--gf-accent-primary-dark)' : 'var(--gf-accent-primary-light)');
        hostElement.style.setProperty('--gf-accent-danger', isDark ? 'var(--gf-accent-danger-dark)' : 'var(--gf-accent-danger-light)');
        hostElement.style.setProperty('--gf-bg-input', isDark ? 'var(--gf-bg-input-dark)' : 'var(--gf-bg-input-light)');
    }

    // --- NEW: UI COMPONENT GENERATION (HTML Templates) ---
    // These functions replicate the HTML structure from our target UI analysis.

    function getSidebarTabHTML() {
        return `
            <div id="gemini-toolbox-container" class="sidebar-tab">
                <div id="gemini-toolbox-btn" class="toolbox-button">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10 4H4C2.89543 4 2 4.89543 2 6V18C2 19.1046 2.89543 20 4 20H20C21.1046 20 22 19.1046 22 18V8C22 6.89543 21.1046 6 20 6H12L10 4Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                    <span>Gemini Toolbox</span>
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="dropdown-arrow">
                        <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <div id="gemini-toolbox-dropdown" class="toolbox-dropdown" style="display: none;">
                    <div id="manage-folders-link" class="dropdown-item">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10 4H4C2.89543 4 2 4.89543 2 6V18C2 19.1046 2.89543 20 4 20H20C21.1046 20 22 19.1046 22 18V8C22 6.89543 21.1046 6 20 6H12L10 4Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>Manage Folders</span>
                    </div>
                    <div id="prompt-library-link" class="dropdown-item">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4 19.5A2.5 2.5 0 0 1 1.5 17V7A2.5 2.5 0 0 1 4 4.5h16A2.5 2.5 0 0 1 22.5 7v10a2.5 2.5 0 0 1-2.5 2.5H4z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M8 10h8M8 14h5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>Prompt Library</span>
                    </div>
                    <div id="bulk-delete-link" class="dropdown-item">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0v12m4-12v12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                        <span>Bulk Delete</span>
                    </div>
                </div>
            </div>
        `;
    }

    function getManageFoldersModalHTML() {
        const folderTreeHTML = renderFolderTree(null, 0);

        function renderFolderTree(parentId, level) {
            let html = '';
            const children = state.folders.filter(f => f.parentId === parentId);
    
            children.forEach(folder => {
                html += `
                    <div class="list-item" data-folder-id="${folder.id}" style="margin-left: ${level * 20}px;">
                        <span class="folder-icon"></span>
                        <span class="item-title">${folder.name}</span>
                        <div class="item-controls">
                            <span>(${folder.chatIds?.length || 0})</span>
                             <button class="icon-btn add-chats-btn" data-folder-id="${folder.id}" title="Add Chats">+</button>
                             <button class="icon-btn add-subfolder-btn" data-parent-id="${folder.id}" title="Add Subfolder">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-folder-plus"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="12" y1="11" x2="12" y2="17"></line><line x1="9" y1="14" x2="15" y2="14"></line></svg>
                            </button>
                             <button class="icon-btn delete-folder-btn" data-folder-id="${folder.id}" title="Delete Folder">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-trash-2"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                            </button>
                        </div>
                    </div>
                `;
                // Recursive call for children
                html += renderFolderTree(folder.id, level + 1);
            });
            return html;
        }
    
        return `
            <div class="modal-header">
                <h2>Manage Folders</h2>
                <button class="icon-btn" id="close-modal-btn">&times;</button>
            </div>
            <div class="modal-body">
                <div class="infi-chatgpt-manageTabs-content">
                    <div style="display: flex; gap: 8px;">
                        <button class="button primary" id="add-folder-btn">Add Folder</button>
                        <input type="search" id="search-folders-input" placeholder="Search folders..." style="flex-grow: 1;">
                </div>
                <div id="folder-list-container">
                        ${renderFolderTree(null, 0)}
                </div>
                    <div class="infi-chatgpt-manageTabs-buttonsContainer">
                         <div style="display: flex; align-items: center; justify-content: flex-end; gap: 8px;">
                            <label for="hide-foldered-toggle">Hide Foldered Chats</label>
                            <input type="checkbox" id="hide-foldered-toggle" ${state.settings.hideFolderedChats ? 'checked' : ''} />
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    function injectPromptLibraryResources() {
        async function fetchWebAccessibleResource(resourcePath) {
            try {
                const url = chrome.runtime.getURL(resourcePath);
                const response = await fetch(url);
                if (!response.ok) {
                    throw new Error(`Failed to fetch ${resourcePath}: ${response.status}`);
                }
                return await response.text();
            } catch (error) {
                console.error(`Error fetching web accessible resource ${resourcePath}:`, error);
                return null;
            }
        }

        fetchWebAccessibleResource('prompt_library.html').then(htmlContent => {
            if (htmlContent) {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = htmlContent;
                shadow.appendChild(tempDiv.firstElementChild);
            }
        });

        fetchWebAccessibleResource('prompt_library.css').then(cssContent => {
            if (cssContent) {
                const styleElement = document.createElement('style');
                styleElement.textContent = cssContent;
                shadow.appendChild(styleElement);
            }
        });
    }

    // --- REFACTORED: INITIALIZATION ---
    async function init() {
        if (document.getElementById(INJECTOR_HOST_ID)) return;
        await delay(500);

        // Find a more stable insertion point, like the recent conversations list container.
        const recentConversationsList = document.querySelector('conversations-list');
        if (recentConversationsList && !document.getElementById(INJECTOR_HOST_ID)) {
            hostElement = document.createElement('div');
            hostElement.id = INJECTOR_HOST_ID;
            shadow = hostElement.attachShadow({ mode: 'open' });
            
            createGlobalStyles();
            
            // Inject the main "Folders" tab
            const sidebarTabHTML = getSidebarTabHTML();
            shadow.innerHTML += sidebarTabHTML;
            
            // Prepend our UI host to the conversation list
            recentConversationsList.prepend(hostElement);
            
            // Add event listeners for the new dropdown functionality
            const toolboxBtn = shadow.getElementById('gemini-toolbox-btn');
            const toolboxDropdown = shadow.getElementById('gemini-toolbox-dropdown');
            const manageFoldersLink = shadow.getElementById('manage-folders-link');
            const bulkDeleteLink = shadow.getElementById('bulk-delete-link');
            const promptLibraryLink = shadow.getElementById('prompt-library-link');
            const dropdownArrow = shadow.querySelector('.dropdown-arrow');
            
            // Toggle dropdown on toolbox button click
            toolboxBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const isVisible = toolboxDropdown.style.display !== 'none';
                toolboxDropdown.style.display = isVisible ? 'none' : 'block';
                dropdownArrow.classList.toggle('rotated', !isVisible);
            });
            
            // Handle manage folders link click
            manageFoldersLink.addEventListener('click', (e) => {
                e.stopPropagation();
                showManageFoldersModal();
                toolboxDropdown.style.display = 'none';
                dropdownArrow.classList.remove('rotated');
            });

            // Handle bulk delete link click
            bulkDeleteLink.addEventListener('click', (e) => {
                e.stopPropagation();
                showBulkDeleteModal();
                toolboxDropdown.style.display = 'none';
                dropdownArrow.classList.remove('rotated');
            });

            // Handle prompt library link click
            promptLibraryLink.addEventListener('click', (e) => {
                e.stopPropagation();
                if (promptLibraryInstance) {
                    promptLibraryInstance.show();
                }
                toolboxDropdown.style.display = 'none';
                dropdownArrow.classList.remove('rotated');
            });

            // Implement click outside to close functionality
            document.addEventListener('click', (e) => {
                const toolboxContainer = shadow.getElementById('gemini-toolbox-container');
                if (toolboxContainer && !toolboxContainer.contains(e.target)) {
                    toolboxDropdown.style.display = 'none';
                    dropdownArrow.classList.remove('rotated');
                }
            });

            await loadData();
            await injectPromptLibraryResources(); // Inject prompt library resources

            // Initialize PromptLibrary
            if (typeof PromptLibrary !== 'undefined') {
                promptLibraryInstance = new PromptLibrary(shadow);
            } else {
                // Retry if the script hasn't loaded yet
                setTimeout(() => {
                    if (typeof PromptLibrary !== 'undefined') {
                        promptLibraryInstance = new PromptLibrary(shadow);
                    }
                }, 500);
            }
        }
    }

    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type === 'childList') {
                if (document.querySelector('conversations-list') && !document.getElementById(INJECTOR_HOST_ID)) {
                    init();
                    // No need to break; let it run to catch theme changes etc.
                }
                 // Add theme change observation
                const newTheme = detectTheme();
                if (newTheme !== currentTheme) {
                    applyThemeStyles();
                }
            }
        }
    });

    observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['class'] });
    
    // Initial check
    init();

    // NOTE: The complete injector.js is much larger (1650 lines) and includes:
    // - Complete folder management system
    // - Bulk delete functionality with progress overlay
    // - Modal management system
    // - Theme detection and styling
    // - Chat organization and visibility control
    // - Full event handling for all UI interactions
    // This is a condensed version showing the main initialization and prompt library integration

})();

# ================================================================
# INSTALLATION INSTRUCTIONS
# ================================================================

# 1. Create a new directory for your Chrome extension
# 2. Copy each section above into its respective file:
#    - manifest.json
#    - prompt_library.html
#    - prompt_library.css
#    - prompt_library.js
#    - background.js (empty file)
#    - injector.js (complete version with all 1650 lines)

# 3. Create required directories:
#    - icons/ (add PNG icons in sizes 16, 32, 48, 128)
#    - lib/ (add html2pdf.bundle.min.js if PDF functionality needed)
#    - scripts/ (add additional scripts if needed)

# 4. Load the extension in Chrome:
#    - Open Chrome -> Settings -> Extensions
#    - Enable "Developer mode"
#    - Click "Load unpacked" and select your extension directory

# 5. Navigate to https://gemini.google.com
# 6. Look for "Gemini Toolbox" in the sidebar
# 7. Click "Prompt Library" to test the functionality

# ================================================================
# TROUBLESHOOTING
# ================================================================

# If the extension doesn't work:
# 1. Check the Chrome DevTools console for errors
# 2. Ensure all files are in the correct locations
# 3. Verify the manifest.json is valid JSON
# 4. Check that the content script is injecting properly
# 5. Test the prompt insertion by clicking on prompts
# 6. Verify the Gemini input field selectors are working

# The key fix for prompt insertion is in the usePrompt() function
# which uses multiple selectors to find the Gemini input field:
# - '.ql-editor.textarea.new-input-ui'
# - '.ql-editor[contenteditable="true"]'  
# - 'rich-textarea .ql-editor'
# - 'div[contenteditable="true"][role="textbox"]'
# - 'textarea' (fallback)

# ================================================================
# END OF COMPLETE EXTENSION CODE
# ================================================================